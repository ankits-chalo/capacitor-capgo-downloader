{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from \"@capacitor/core\";\n\nexport interface DownloadTask {\n  id: string;\n  progress: number;\n  state: 'PENDING' | 'RUNNING' | 'PAUSED' | 'DONE' | 'ERROR';\n}\n\nexport interface DownloadOptions {\n  id: string;\n  url: string;\n  destination: string;\n  fileName?: string;\n  headers?: { [key: string]: string };\n  network?: 'cellular' | 'wifi-only';\n  priority?: 'high' | 'normal' | 'low';\n}\n\nexport interface CapacitorDownloaderPlugin {\n  download(options: DownloadOptions): Promise<DownloadTask>;\n  pause(id: string): Promise<void>;\n  resume(id: string): Promise<void>;\n  stop(id: string): Promise<void>;\n  checkStatus(id: string): Promise<DownloadTask>;\n  getFileInfo(path: string): Promise<{ size: number; type: string }>;\n  \n  addListener(eventName: 'downloadProgress', listenerFunc: (progress: { id: string; progress: number }) => void): Promise<PluginListenerHandle>;\n  addListener(eventName: 'downloadCompleted', listenerFunc: (result: { id: string }) => void): Promise<PluginListenerHandle>;\n  addListener(eventName: 'downloadFailed', listenerFunc: (error: { id: string; error: string }) => void): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n"]}